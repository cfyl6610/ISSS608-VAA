---
title: "Hands-on Exercise 5"
author: "FU YILIN"
---

# 1. Getting Started 

## 1.1 Installing and launching R packages

The `pacman::p_load()` function is used for efficient package management, automatically installing and loading multiple packages required for this exercise. This includes:

-   **igraph, tidygraph, ggraph:** For creating and visualizing network graphs.

-   **visNetwork:** For interactive network visualization.

-   **lubridate, clock:** For handling date and time data.

-   **tidyverse:** A collection of packages for data manipulation and visualization.

-   **graphlayouts:** For optimized network layouts.

-   **concaveman, ggforce:** For enhanced graph aesthetics.

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, 
               concaveman, ggforce)

```

## 1.2 Importing network data from files

The network data is imported using `read_csv()`:

-   **`GAStech_nodes`** represents the nodes in the network (individuals or entities).

-   **`GAStech_edges`** represents the edges or connections between these nodes, detailing email communications.

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")

```

## 1.3 Reviewing the imported data

The `glimpse()` function provides an overview of the `GAStech_edges` dataset, displaying the column names, data types, and a preview of the data.

```{r}
glimpse(GAStech_edges)

```

# **2. Data Wrangling**

## **2.1 Data Transformation** 

-   The `mutate()` function with `dmy()` from `lubridate` is used to convert the `SentDate` column to a standard date format.

-   A new column `Weekday` is created, labeling each date with the corresponding day of the week.

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))

```

### **2.2** Filtering and Aggregating Edge Data

-   This section focuses on cleaning and summarizing the communication data:

    -   Filtering to include only work-related emails (`MainSubject == "Work related"`).

    -   Grouping communications by source, target, and weekday.

    -   Calculating the frequency (`Weight`) of communications between each pair.

    -   Removing self-loops (emails sent to oneself) and connections with low frequency.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

# **3.** Building a Tidygraph Data Model

A tidygraph object is created using `tbl_graph()`, which organizes the data into a network model with nodes and edges.

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)

```

### **3.1 Reviewing the output tidygraph’s graph object**

The `GAStech_graph` object is inspected to ensure it is correctly structured.

```{r}
GAStech_graph

```

## **3.2 Changing the active object**

The graph is arranged by descending `Weight` to identify the most active connections.

```{r}

GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

# **4. Network Visualization**

## **4.1 Plotting a basic network graph**

A basic network graph is created using `ggraph()` with simple node and edge visuals.

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()

```

## **4.2 Changing the default network graph theme**

-   The theme is customized using `theme_graph()`, improving visual appeal.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()

```

## **4.3 Changing the coloring of the plot**

Nodes and edges are customized with specific colors and the Fruchterman-Reingold layout for better clarity.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')

```

## **4.4 Fruchterman and Reingold layout**

A force-directed layout is applied to the graph for better visual structure.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()

```

### **4.5 Modifying network nodes**

We colour each node by referring to their respective departments.

```{r}

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

### **4.6 Modifying edges**

In the code chunk below, the thickness of the edges will be mapped with the *Weight* variable.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()

```

### **5. Creatin facet graphs** 

### **5.1 Working with *facet_edges()***

Facet graphs allow visualizing network data across different categories (like weekdays) using `facet_edges()`.

```{r}

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

### **5.2** Enhancing Facet Graphs

Customizing facet edges with a legend positioned at the bottom for better readability.

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)

```

### **5.3 A framed facet graph**

Adding a frame to facet graphs using `th_foreground()` for enhanced aesthetics.

```{r}
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')

```

### **5.4 Working with *facet_nodes()***

Using `facet_nodes()` to separate nodes by department.

```{r}

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## **6. Network Metrics Analysis**

### **6.1 Computing centrality indices**

Calculating betweenness centrality to identify key nodes in the network.

```{r}

g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

### **6.2 Visualising network metrics**

Using `group_edge_betweenness()` to detect communities and color nodes by community.

```{r}

g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

### **6.3 Visualising Community**

Visualizing communities with `geom_mark_hull()` for a more distinct layout.

```{r}
g <- GAStech_graph %>%
  mutate(community = as.factor(
    group_edge_betweenness(
      weights = Weight, 
      directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(
    aes(
      width=Weight), 
    alpha=0.2) +
  scale_edge_width(
    range = c(0.1, 5)) +
  geom_node_point(
    aes(colour = community))  

g + theme_graph()
```

In order to support effective visual investigation, the community network above has been revised by using [`geom_mark_hull()`](https://ggforce.data-imaginist.com/reference/geom_mark_hull.html) of [ggforce](https://ggforce.data-imaginist.com/) package.

```{r}
g <- GAStech_graph %>%
  activate(nodes) %>%
  mutate(community = as.factor(
    group_optimal(weights = Weight)),
         betweenness_measure = centrality_betweenness()) %>%
  ggraph(layout = "fr") +
  geom_mark_hull(
    aes(x, y, 
        group = community, 
        fill = community),  
    alpha = 0.2,  
    expand = unit(0.3, "cm"),  # Expand
    radius = unit(0.3, "cm")  # Smoothness
  ) + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(fill = Department,
                      size = betweenness_measure),
                      color = "black",
                      shape = 21)
  
g + theme_graph()
```

## **7. Building Interactive Network Graph with visNetwork**

### **7.1 Data preparation**

Preparing data for an interactive network with visNetwork.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

### **7.2 Plotting the first interactive network graph**

Visualizing an interactive network with customizable layout and interactivity.

```{r}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)

```

### **7.3 Working with layout**

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

### **7.4 Working with visual attributes - Nodes**

```{r}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

When we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the *group* field.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### **7.5 Working with visual attributes - Edges**

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### **7.6 Interactivity**

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

# Summary

This exercise demonstrated advanced network visualization techniques using `ggraph` for static networks and `visNetwork`for interactive graphs. We explored centrality metrics, community detection, and facet visualization for detailed network analysis.
