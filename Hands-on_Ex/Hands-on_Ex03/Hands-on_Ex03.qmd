---
title: "Hands-on Exercise 3"
author: "FU YILIN"
---

# Part 1: **Programming Interactive Data Visualisation with R**

## 1.1 Getting Started

To begin this exercise, load the necessary R packages that support interactive and linked visualisations.

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

## 1.2 Importing Data

We'll work with a dataset containing students' exam scores. This data will be used throughout the exercise to create various visualisations.

```{r}
exam_data <- read_csv("Data/Exam_data.csv")
```

## **1.3 Interactive Visualisation with ggiraph**

### 1.3.1 Dot Plot with Tooltips

This plot introduces basic interactivity where hovering over dots reveals student IDs.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

## 

### **1.3.2 Displaying** Multiple Tooltip Fields

Add richer information to tooltips by concatenating ID and class.

```{r}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

### **1.3.3 Customising Tooltip style**

Modify the tooltip appearance using inline CSS.

```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)                                        
```

### 1.3.4 Displaying Summary Statistics in Tooltip

Show aggregate values like mean and SEM with hover feedback.

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

### 

::: {.callout-note title="Things to learn from the code chunk above"}
-   Replace the size argument with linewidth in`geom = "errorbar"`layer to resolve the warning.
-   Explanation
    -   size used to control the thickness of lines in earlier ggplot2 versions.
    -   Since ggplot2 v3.4.0, size is reserved for point sizes, and linewidth should be used for line thickness to improve clarity and consistency.
:::

Here is the corrected version of the code:

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, linewidth = 0.2
)

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

### 1.3.5 Hover Effect with data_id

Implement visual effects such as highlighting and opacity change on hover.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)                                        
```

### 1.3.6 Styling the Hover Effect

Implement visual effects such as highlighting and opacity change on hover.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```

### 1.3.7 Tooltip + Hover Integration

Implement visual effects such as highlighting and opacity change on hover.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, 
        data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```

### 1.3.8 Adding Click Actions with onclick

Clicking a dot opens a URL with more student information.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)                                        
```

### 1.3.9 Coordinated Views

Synchronise hover effects across multiple views using shared IDs.

```{r}
p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

## 1.4 Interactive Visualisation with Plotly

### 1.4.1 Scatter Plot

```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

::: {.callout-note title="Things to learn from the code chunk above"}
-   `“No trace type specified”` mean we didn't specify what kind of plot we want, but since we gave x and y, it will assume we want a scatter plot. By default, it chooses `type = 'scatter'.`\
-   `“No scatter mode specified: Setting the mode to markers”`means a scatter plot can have different “modes”, such as:
    -   mode = 'markers' → only dots
    -   mode = 'lines' → connected lines
    -   mode = 'lines+markers' → both dots and lines
    -   Since we didn’t specify a mode, Plotly chose: `mode = 'markers'` (i.e. dots only)
:::

If we want to be more explicit, here is the code:

```{r}
plot_ly(data = exam_data, 
        x = ~MATHS, 
        y = ~ENGLISH, 
        type = 'scatter', 
        mode = 'markers')
```

### 1.4.2 Encoding by Race

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

Similar to the note of previous code chunk, we can specify the trace type and mode to be more explicit:

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE,
        type = 'scatter', 
        mode = 'markers')
```

### 1.4.3 ggplot Conversion

Convert existing `ggplot2` objects into interactive plots.

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

### 1.4.4 Coordinated Linked Views

Highlight observations across multiple charts using `highlight_key()` and `subplot()`.

```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

## 1.5 Crosstalk and DT

### 1.5.1 Interactive Table

Render a searchable, sortable, compact datatable using `DT`.

```{r}
DT::datatable(exam_data, class= "compact")
```

### 1.5.2 Linked Table and Plot

Link DT tables and plots interactively using the `crosstalk` framework.

```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```

# **Part 2: Programming Animated Statistical Graphics with R**

## 2.1 Getting Started

Loading the R packages

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

## **2.2 Importing the data**

Load population data from Excel and prepare it for time-series animation.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("Data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

::: {.callout-note title="Things to learn from the code chunk above"}
-   We’re getting the above warning because we’re passing an external character `vector col` directly into `across()`, which uses `tidyselect` under the hood — and `tidyselect` no longer allows that syntax.
-   Solution:
    -   Use `all_of()` inside `across()`
    -   Convert “Country” and “Continent” to factor (explicitly and correctly).
    -   Convert “Year” column to integer.
:::

Updated code chunk:

```{r}
col <- c("Country", "Continent")

globalPop <- read_xls("Data/GlobalPopulation.xls",
                      sheet = "Data") %>%
  mutate(across(all_of(col), as.factor)) %>%
  mutate(Year = as.integer(Year))
```

## 2.3 Animated Visualisation with gganimate

### **2.3.1 Building a static population bubble plot**

Create a base plot using `geom_point()` with aesthetic mappings.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

### 2.3.2 Animated Plot

Use `transition_time()` and `ease_aes()` to animate transitions over time.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')          
```

## 2.4 Animated Visualisation with plotly

### **2.4.1 Using ggplotly()**

Convert animated ggplot objects to interactive plotly charts.

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

::: {.callout-note title="Things to learn from the code chunk above"}
-   The first warning we’re getting: `Ignoring unknown aesthetics: frame` is because `frame` is not a valid aesthetic in `ggplot2::geom_point()` — it only works in `Plotly` when building animations.
-   Solution: Use `plotly::plot_ly()` directly for animations instead of `ggplot2::ggplot()`
-   The second warning"Warning in p\$x\$data\[firstFrame\] \<- p\$x\$frames\[\[1\]\]\$data: number of items to replace is not a multiple of replacement length" happens because `ggplotly()` tries to generate frames from `ggplot` object, but it has no built-in animation logic, and `frame` was misused in the `aes()` mapping. So plotly’s frame structure is broken or inconsistent.
:::

We can use the code chunk below to get an interactive static bubble chart:

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

For animated version, we can switch to `plotly::plot_ly()`

```{r}
plot_ly(globalPop,
        x = ~Old,
        y = ~Young,
        size = ~Population,
        color = ~Country,
        frame = ~Year,
        text = ~paste("Country:", Country, "<br>Year:", Year, "<br>Pop:", Population),
        type = 'scatter',
        mode = 'markers',
        sizes = c(10, 80)) %>%
  layout(xaxis = list(title = "% Aged"),
         yaxis = list(title = "% Young"))
```

### 2.4.2 Fix Display Issues

Fix layout issues and hide unnecessary legends to clean up the output.

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```

### **2.4.3 Directly with plot_ly()**

Use `plot_ly()` directly to generate a bubble chart animated by year.

```{r}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```

::: {.callout-note title="Things to learn from the code chunk above"}
-   We're seeing the repeated warning: `Warning: line.width does not currently support multiple values.`because `Plotly` is being asked to apply multiple `line.width` values (likely per-frame or per-point), but that property doesn’t support vectors — it expects a single value.
-   When using `plot_ly()` with `frame = ~Year` (i.e., animation), each frame is a separate trace, and `Plotly` internally tries to apply styling (like `line.width`) across frames. If the dataset has more than one entry per frame, and it tries to assign a vector of widths, this warning appears.
-   However — we’re not explicitly using `line.width` in the code, so it’s likely being set implicitly, possibly by an old or incompatible version of `Plotly R` or from system styles.
:::

We can explicitly define both `marker` and `symbol` in the plot, and remove `size = ~Population` from the main `aesthetic` — instead, control it entirely inside `marker`.

```{r}
library(plotly)

bp <- plot_ly(globalPop,
        x = ~Old,
        y = ~Young,
        frame = ~Year,
        text = ~paste("Country:", Country, "<br>Population:", Population),
        hoverinfo = "text",
        type = "scatter",
        mode = "markers",
        color = ~Continent,
        marker = list(
          sizemode = "area",
          sizeref = 2 * max(globalPop$Population, na.rm = TRUE) / (100^2),
          size = ~Population,
          line = list(width = 1)
        ),
        showlegend = FALSE
) %>%
  layout(
    xaxis = list(title = "% Aged"),
    yaxis = list(title = "% Young")
  )

bp
```

# Summary

In this hands-on exercise, we learned how to create both interactive and animated data visualisations in R. Part 1 focused on interactive graphics using `ggiraph`, `plotly`, and `DT` for better data exploration and presentation. Part 2 introduced animated plots with `gganimate` and `plotly` to enhance time-based storytelling. These techniques are especially useful in building dashboards, reports, and applications where user engagement and clarity are key.
