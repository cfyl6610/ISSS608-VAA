[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "1.1 Background",
    "text": "1.1 Background\nSingapore’s demographic profile provides critical insights for policy planning, urban development, and resource allocation. The dataset respopagesex2024.csv contains population counts by age, sex, planning area, and subzone, based on Singapore’s official population statistics for 2024. This research aims to uncover key trends in aging and spatial demographic variations using visual analytics."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "1.2 The Data",
    "text": "1.2 The Data\nThe dataset used is respopagesex2024.csv obtained from the Department of Statistics Singapore. It includes the following fields:\n\nPA: Planning Area\nSZ: Subzone\nAge: Age in years (0 to 90+)\nSex: Male or Female\nPop: Resident count\nTime: Time / Period\n\n\n\n\n\n\n\nNote\n\n\n\n1) For June 2024, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority's Master Plan 2019. \n2) Data from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period. \n3) The figures have been rounded to the nearest 10. \n4) The data may not add up due to rounding."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#research-objectives",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#research-objectives",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "1.3 Research Objectives",
    "text": "1.3 Research Objectives\nUsing the Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset, this article aims to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 function to explore:\n\nAreas with pronounced aging patterns and low birth rates\nSpatial variation of age distribution across planning areas and regions"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataset-overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dataset-overview",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "3.1 Dataset Overview",
    "text": "3.1 Dataset Overview\n\n\n\n\n\n\nNote\n\n\n\nThis dataset stores “90_and_Over” as a character value in the Age column, we need to clean and convert it to a numeric value to perform age-based analysis. We use 95 as a conservative numeric replacement.\n\n\n\ndata &lt;- read_csv(\"Data/respopagesex2024.csv\") %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  drop_na(Age)\n\nRows: 60424 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): PA, SZ, Age, Sex\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset consists of 60,424 rows and 6 columns, representing Singapore’s resident population as of 2024.\nA warning was raised when converting the Age column from character to numeric:\n\n\n\n\n\n\nWarning\n\n\n\nNAs introduced by coercion\n\n\nThis indicates that at least one value in the Age column was non-numeric (e.g., “Total” or “Unknown”), which cannot be coerced to a number and was converted to NA. To ensure accurate analysis, those invalid rows were excluded using drop_na(Age). This step guarantees that only valid age-based population entries are used in further calculations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#duplicate-check",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#duplicate-check",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "3.2 Duplicate Check",
    "text": "3.2 Duplicate Check\n\nsum(duplicated(data))\n\n[1] 0\n\ndata[duplicated(data), ]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;dbl&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\nResult suggests that there are no fully duplicate rows in this dataset.\nAfter cleaning, 60,424 valid records remain for analysis. No duplicate entries were detected. Non-numeric age entries, likely representing summary rows such as ‘Total’, were excluded."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#subzone-summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#subzone-summary",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "3.3 Subzone Summary",
    "text": "3.3 Subzone Summary\nThe code chunk below creates a summary table that shows all subzones belonging to each planning area, displayed cleanly using the gt() package for better readability. It’s useful for understanding the structure and granularity of the geographic data.\n\ngrouped &lt;- data %&gt;%\n  select(PA, SZ) %&gt;%\n  distinct() %&gt;%\n  arrange(PA, SZ) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Subzones = paste(SZ, collapse = \", \"))\n\ngrouped %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Planning Areas and Their Subzones\"\n  )\n\n\n\n\n\n\n\nPlanning Areas and Their Subzones\n\n\nPA\nSubzones\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre, Cheng San, Chong Boon, Kebun Bahru, Sembawang Hills, Shangri-La, Tagore, Townsville, Yio Chu Kang, Yio Chu Kang East, Yio Chu Kang North, Yio Chu Kang West\n\n\nBedok\nBayshore, Bedok North, Bedok Reservoir, Bedok South, Frankel, Kaki Bukit, Kembangan, Siglap\n\n\nBishan\nBishan East, Marymount, Upper Thomson\n\n\nBoon Lay\nLiu Fang, Samulun, Shipyard, Tukang\n\n\nBukit Batok\nBrickworks, Bukit Batok Central, Bukit Batok East, Bukit Batok South, Bukit Batok West, Gombak, Guilin, Hillview, Hong Kah North\n\n\nBukit Merah\nAlexandra Hill, Alexandra North, Bukit Ho Swee, Bukit Merah, City Terminals, Depot Road, Everton Park, Henderson Hill, Kampong Tiong Bahru, Maritime Square, Redhill, Singapore General Hospital, Telok Blangah Drive, Telok Blangah Rise, Telok Blangah Way, Tiong Bahru, Tiong Bahru Station\n\n\nBukit Panjang\nBangkit, Dairy Farm, Fajar, Jelebu, Nature Reserve, Saujana, Senja\n\n\nBukit Timah\nAnak Bukit, Coronation Road, Farrer Court, Hillcrest, Holland Road, Leedon Park, Swiss Club, Ulu Pandan\n\n\nCentral Water Catchment\nCentral Water Catchment\n\n\nChangi\nChangi Airport, Changi Point, Changi West\n\n\nChangi Bay\nChangi Bay\n\n\nChoa Chu Kang\nChoa Chu Kang Central, Choa Chu Kang North, Keat Hong, Peng Siang, Teck Whye, Yew Tee\n\n\nClementi\nClementi Central, Clementi North, Clementi West, Clementi Woods, Faber, Pandan, Sunset Way, Toh Tuck, West Coast\n\n\nDowntown Core\nAnson, Bayfront Subzone, Bugis, Cecil, Central Subzone, City Hall, Clifford Pier, Marina Centre, Maxwell, Nicoll, Phillip, Raffles Place, Tanjong Pagar\n\n\nGeylang\nAljunied, Geylang East, Kallang Way, Kampong Ubi, Macpherson\n\n\nHougang\nDefu Industrial Park, Hougang Central, Hougang East, Hougang West, Kangkar, Kovan, Lorong Ah Soo, Lorong Halus, Tai Seng, Trafalgar\n\n\nJurong East\nInternational Business Park, Jurong Gateway, Jurong Port, Jurong River, Lakeside (Business), Lakeside (Leisure), Penjuru Crescent, Teban Gardens, Toh Guan, Yuhua East, Yuhua West\n\n\nJurong West\nBoon Lay Place, Chin Bee, Hong Kah, Jurong West Central, Kian Teck, Safti, Taman Jurong, Wenya, Yunnan\n\n\nKallang\nBendemeer, Boon Keng, Crawford, Geylang Bahru, Kallang Bahru, Kampong Bugis, Kampong Java, Lavender, Tanjong Rhu\n\n\nLim Chu Kang\nLim Chu Kang\n\n\nMandai\nMandai East, Mandai Estate, Mandai West\n\n\nMarina East\nMarina East\n\n\nMarina South\nMarina South\n\n\nMarine Parade\nEast Coast, Katong, Marina East (Mp), Marine Parade, Mountbatten\n\n\nMuseum\nBras Basah, Dhoby Ghaut, Fort Canning\n\n\nNewton\nCairnhill, Goodwood Park, Istana Negara, Monk's Hill, Newton Circus, Orange Grove\n\n\nNorth-Eastern Islands\nNorth-Eastern Islands\n\n\nNovena\nBalestier, Dunearn, Malcolm, Moulmein, Mount Pleasant\n\n\nOrchard\nBoulevard, Somerset, Tanglin\n\n\nOutram\nChina Square, Chinatown, Pearl's Hill, People's Park\n\n\nPasir Ris\nFlora Drive, Loyang East, Loyang West, Pasir Ris Central, Pasir Ris Drive, Pasir Ris Park, Pasir Ris Wafer Fab Park, Pasir Ris West\n\n\nPaya Lebar\nAirport Road, Paya Lebar East, Paya Lebar North, Paya Lebar West, Plab\n\n\nPioneer\nBenoi Sector, Gul Basin, Gul Circle, Joo Koon, Pioneer Sector\n\n\nPunggol\nConey Island, Matilda, Northshore, Punggol Canal, Punggol Field, Punggol Town Centre, Waterway East\n\n\nQueenstown\nCommonwealth, Dover, Ghim Moh, Holland Drive, Kent Ridge, Margaret Drive, Mei Chin, National University Of S'pore, One North, Pasir Panjang 1, Pasir Panjang 2, Port, Queensway, Singapore Polytechnic, Tanglin Halt\n\n\nRiver Valley\nInstitution Hill, Leonie Hill, One Tree Hill, Oxley, Paterson\n\n\nRochor\nBencoolen, Farrer Park, Kampong Glam, Little India, Mackenzie, Mount Emily, Rochor Canal, Selegie, Sungei Road, Victoria\n\n\nSeletar\nPulau Punggol Barat, Pulau Punggol Timor, Seletar, Seletar Aerospace Park\n\n\nSembawang\nAdmiralty, Sembawang Central, Sembawang East, Sembawang North, Sembawang Springs, Sembawang Straits, Senoko North, Senoko South, The Wharves\n\n\nSengkang\nAnchorvale, Compassvale, Fernvale, Lorong Halus North, Rivervale, Sengkang Town Centre, Sengkang West\n\n\nSerangoon\nLorong Chuan, Seletar Hills, Serangoon Central, Serangoon Garden, Serangoon North, Serangoon North Ind Estate, Upper Paya Lebar\n\n\nSimpang\nPulau Seletar, Simpang North, Simpang South, Tanjong Irau\n\n\nSingapore River\nBoat Quay, Clarke Quay, Robertson Quay\n\n\nSouthern Islands\nSentosa, Southern Group\n\n\nStraits View\nStraits View\n\n\nSungei Kadut\nGali Batu, Kranji, Pang Sua, Reservoir View, Turf Club\n\n\nTampines\nSimei, Tampines East, Tampines North, Tampines West, Xilin\n\n\nTanglin\nChatsworth, Nassim, Ridout, Tyersall\n\n\nTengah\nBrickland, Forest Hill, Garden, Park, Plantation, Tengah Industrial Estate\n\n\nToa Payoh\nBidadari, Boon Teck, Braddell, Joo Seng, Kim Keat, Lorong 8 Toa Payoh, Pei Chun, Potong Pasir, Sennett, Toa Payoh Central, Toa Payoh West, Woodleigh\n\n\nTuas\nTengeh, Tuas Bay, Tuas North, Tuas Promenade, Tuas View, Tuas View Extension\n\n\nWestern Islands\nJurong Island And Bukom, Semakau, Sudong\n\n\nWestern Water Catchment\nBahar, Cleantech, Murai\n\n\nWoodlands\nGreenwood Park, Midview, North Coast, Senoko West, Woodgrove, Woodlands East, Woodlands Regional Centre, Woodlands South, Woodlands West\n\n\nYishun\nKhatib, Lower Seletar, Nee Soon, Northland, Springleaf, Yishun Central, Yishun East, Yishun South, Yishun West"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-sex-pyramid",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-sex-pyramid",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "4.1 Age-Sex Pyramid",
    "text": "4.1 Age-Sex Pyramid\nThis population pyramid visualizes the age and gender distribution. Males are plotted on the left and females on the right, highlighting the dependency load and gender imbalance at older ages.\n\npyramid_data &lt;- data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\npyramid_plot &lt;- ggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  labs(title = \"Singapore Resident Population Pyramid (2024)\",\n       x = \"Age\", y = \"Population\") +\n  theme_minimal()\n\npyramid_plot\n\n\n\n\n\n\n\n\nObservations:\n\nA bulge around ages 30–50 suggests a dominant working-age population.\nFemales dominate in ages 80+, reflecting higher life expectancy.\nLower base suggests declining birth rates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aging-structure-across-planning-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aging-structure-across-planning-areas",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "4.2 Aging Structure Across Planning Areas",
    "text": "4.2 Aging Structure Across Planning Areas\nTo better understand the spatial dynamics of population aging, we compared the total population of the young group (aged 0–14) and the aging group (aged 65 and above) across Singapore’s Planning Areas (PAs). This analysis highlights demographic imbalances by region, identifying areas where the elderly population significantly exceeds the youth population, and vice versa.\n\nage_groups &lt;- data %&gt;%\n  filter(Age &lt;= 14 | Age &gt;= 65) %&gt;%\n  mutate(group = case_when(\n    Age &lt;= 14 ~ \"Young\",\n    Age &gt;= 65 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, group) %&gt;%\n  summarise(total_pop = sum(Pop), .groups = \"drop\")\n\nggplot(age_groups, aes(x = reorder(PA, -total_pop), y = total_pop, fill = group)) +\n  geom_col(position = \"dodge\") +\n  coord_flip() +\n  labs(title = \"Young vs Aging Population by Planning Area\",\n       x = \"Planning Area\", y = \"Population\", fill = \"Age Group\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nWe refine the visualization by focusing on the top 20 Planning Areas with the highest combined population of young (aged 0–14) and elderly (aged 65 and above) residents. The top_pa object identifies these most populous areas based on total demographic burden, while top_age_groups filters the dataset accordingly to ensure that only these selected Planning Areas are included in the plot for clearer comparison.\n\ntop_pa &lt;- age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  slice_head(n = 20)  # select top 20\n\ntop_age_groups &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA)\n\n# Define the order (e.g. by total population descending)\npa_order &lt;- top_age_groups %&gt;%\n  group_by(PA) %&gt;%\n  summarise(total = sum(total_pop)) %&gt;%\n  arrange(desc(total)) %&gt;%\n  pull(PA)\n\n# Apply the same factor levels\ntop_age_groups &lt;- top_age_groups %&gt;%\n  mutate(PA = factor(PA, levels = pa_order))\n\nratio_data &lt;- age_groups %&gt;%\n  filter(PA %in% top_pa$PA) %&gt;%\n  pivot_wider(names_from = group, values_from = total_pop) %&gt;%\n  mutate(ratio = Aging / Young) %&gt;%\n  filter(!is.na(PA)) %&gt;%  # Remove NAs\n  mutate(PA = factor(PA, levels = pa_order))\n\n# Top bar chart\nbar_plot &lt;- ggplot(top_age_groups, aes(x = total_pop, y = fct_rev(PA), fill = group)) +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Population\", y = NULL, fill = \"Age Group\") +\n  theme_minimal()\n\n# Bottom line chart with consistent PA order\nline_plot &lt;- ggplot(ratio_data, aes(x = PA, y = ratio)) +\n  geom_point(size = 3, color = \"black\") +\n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = \"Planning Area\", y = \"Aging / Young Ratio\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Combine them\n(bar_plot / line_plot) + plot_layout(heights = c(2, 1)) +\n  plot_annotation(title = \"Population Distribution and Aging Ratio by Planning Area\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo enlarge the graph for better readability, we can increase the figure width and height:\n\nfig.width=12 → makes the chart wider\nfig.height=8 → gives enough vertical space for stacked or combined plots\n\nBoth plots use consistent PA ordering for easier comparison.\n\n\nAging-Heavy Areas: these planning areas have a high Aging-to-Young ratio, meaning significantly more elderly (65+) than young residents (0–14):\n\nAng Mo Kio has the highest aging ratio (above 2.0) despite moderate total population — indicating a strongly aging population.\nBukit Merah and Queenstown also exhibit high aging ratios with noticeably lower young population bars. These are classic mature estates with older residents aging in place.\nBedok and Toa Payoh show both large elderly populations and high aging ratios.\n\nYouth-Dense Areas:\n\nPunggol has the lowest aging ratio (under 0.5) and a visibly dominant young population bar — a clear sign of a family-oriented, younger estate.\nSengkang and Tampines also have low aging ratios and high young populations, suggesting they are popular for younger families.\nJurong West and Woodlands show balanced profiles but still lean younger compared to the national median."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-distribution-by-region-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#age-distribution-by-region-type",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "4.3 Age Distribution by Region Type",
    "text": "4.3 Age Distribution by Region Type\nTo examine regional differences in demographic structure, a boxplot was generated to illustrate the distribution of resident ages across Singapore’s various region types, as defined by their respective Planning Areas.\nThe Urban Authority of Singapore (URA) has categorized Singapore into 5 regions for urban planning purposes, namely Central Region, North Region, North-East Region, East Region and West Region.\nBy aligning Planning Areas with these official region classifications, the analysis enables a clearer understanding of age-related demographic patterns across the island.\n\nexpanded_data &lt;- data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"95\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(PA = str_trim(PA)) %&gt;%\n  mutate(region_type = case_when(\n    # Core Central Region\n    PA %in% c(\"Downtown Core\", \"Outram\", \"Sentosa\", \"Rochor\", \"Orchard\", \"Newton\",\n              \"River Valley\", \"Bukit Timah\", \"Holland Road\", \"Tanglin\", \"Novena\", \"Thomson\") ~ \"Core Central Region\",\n    \n    # Rest of Central Region\n    PA %in% c(\"Bishan\", \"Bukit Merah\", \"Geylang\", \"Kallang\", \"Marine Parade\", \"Queenstown\", \"Southern Islands\", \"Toa Payoh\") ~ \"Rest of Central Region\",\n    \n    # North Region\n    PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North Region\",\n    \n    # North-East Region\n    PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\",\n              \"Sengkang\", \"Serangoon\") ~ \"North-East Region\",\n    \n    # East Region\n    PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Paya Lebar\", \"Pasir Ris\", \"Tampines\") ~ \"East Region\",\n    \n    # West Region\n    PA %in% c(\"Bukit Batok\", \"Bukit Panjang\", \"Boon Lay\", \"Pioneer\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\", \"Jurong West\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\") ~ \"West Region\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(region_type)) %&gt;%\n  uncount(weights = Pop)\n  \np1 &lt;- ggplot(expanded_data, aes(x = region_type, y = Age, fill = region_type)) +\n  geom_boxplot() +\n  labs(title = \"Age Distribution by Region Type\", x = \"Region\", y = \"Age\") +\n  theme_minimal() +\n  coord_flip()\n\np2 &lt;- ggplot(expanded_data, aes(x = Age, y = fct_reorder(PA, Age), fill = region_type)) +\n  geom_boxplot() +\n  facet_wrap(~ region_type, scales = \"free_y\") +\n  labs(\n    title = \"Age Distribution by Planning Area and Region\",\n    x = \"Age\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal()\n\np1 / p2 +\n  plot_annotation(title = \"Overview: Regional and Planning Area Age Distribution\")\n\n\n\n\n\n\n\n\nFrom Age Distribution by Region Type figure, we can observe that overall age distribution is similar. All regions have interquartile ranges (IQRs) roughly between 25 and 65 years. Core Central Region has a slightly wider IQR; median age around mid-40s. East Region has a slightly lower median than others. North Region & North-East Region have similar median and IQR (~25–65), slightly lower upper quartile, possibly reflects more family-centric, middle-aged population. West Region also has a broad IQR with no extreme values. No region shows a highly youth-dominant or elderly-dominant skew in isolation.\nFrom the Age Distribution by Planing Area and Region figure, we can observe notable outlines in the plots.\n\nNorth-East Region – Seletar: Has multiple high outliers (above age 80+), despite a narrow IQR.\nWest Region – Tengah: Displays a string of high outliers, unusually concentrated near 85–90. Tengah is a newly developing area, so this is surprising.\nCore Central Region – Downtown Core, Outram, Newton: Outliers at both very low and very high ages, which reflects age-diverse."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, we will explore how to enhance `ggplot2` visualizations using extensions such as `ggrepel`, `patchwork`, `ggthemes`, and `hrbrthemes`.\n\n\nWe begin by loading the necessary libraries using the `pacman` package, which ensures packages are installed before loading them.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nThe dataset Exam_data.csv contains scores for primary school students. We import it using read_csv.\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "We begin by loading the necessary libraries using the `pacman` package, which ensures packages are installed before loading them.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "The dataset Exam_data.csv contains scores for primary school students. We import it using read_csv.\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#base-geom_label-annotation",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#base-geom_label-annotation",
    "title": "Hands-on Exercise 2",
    "section": "2.1 Base geom_label Annotation",
    "text": "2.1 Base geom_label Annotation\nFirst, let’s plot English vs. Maths scores using base ggplot2 annotation with geom_label.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#improved-annotation-with-geom_label_repel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#improved-annotation-with-geom_label_repel",
    "title": "Hands-on Exercise 2",
    "section": "2.2 Improved Annotation with geom_label_repel",
    "text": "2.2 Improved Annotation with geom_label_repel\nThis basic plot uses geom_label, but the labels can overlap. Let’s improve that with geom_label_repel from the ggrepel package.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#default-theme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#default-theme",
    "title": "Hands-on Exercise 2",
    "section": "3.1 Default Theme",
    "text": "3.1 Default Theme\nLet’s start with a simple histogram of Maths scores using the default theme_gray.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#applying-theme_economist-from-ggthemes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#applying-theme_economist-from-ggthemes",
    "title": "Hands-on Exercise 2",
    "section": "3.2 Applying theme_economist from ggthemes",
    "text": "3.2 Applying theme_economist from ggthemes\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#applying-theme_ipsum-from-hrbrthemes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#applying-theme_ipsum-from-hrbrthemes",
    "title": "Hands-on Exercise 2",
    "section": "3.3 Applying theme_ipsum from hrbrthemes",
    "text": "3.3 Applying theme_ipsum from hrbrthemes\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#customizing-theme_ipsum",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#customizing-theme_ipsum",
    "title": "Hands-on Exercise 2",
    "section": "3.4 Customizing theme_ipsum",
    "text": "3.4 Customizing theme_ipsum\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-the-plots",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-the-plots",
    "title": "Hands-on Exercise 2",
    "section": "4.1 Creating the Plots",
    "text": "4.1 Creating the Plots\n\n4.1.1 Plot 1: Maths Score Histogram\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n4.1.2 Plot 2: English Score Histogram\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n4.1.3 Plot 3: Scatterplot of English vs Maths\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-plots-side-by-side",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-plots-side-by-side",
    "title": "Hands-on Exercise 2",
    "section": "4.2 Combining Two Plots Side-by-Side",
    "text": "4.2 Combining Two Plots Side-by-Side\n\n4.2.1 Two Plots Side-by-Side\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n4.2.2 Combining Three Plots\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n4.2.3 Adding Tags to a Composite Figure\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n4.2.4 Adding an Inset Plot\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n4.2.5 Composite Plot with Theme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThis concludes Hands-on Exercise 2. We’ve explored how to annotate, theme, and combine ggplot2 graphics using several powerful R packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, we begin by installing and loading the necessary R packages using the pacman package, which simplifies package management by loading multiple packages at once. The key packages include:\n\nggdist: For advanced distribution visualization.\nggridges: For creating ridgeline plots.\nggthemes: For applying thematic styles to plots.\ncolorspace: For color manipulation in plots.\ntidyverse: A collection of R packages designed for data science.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nThis section demonstrates how to load a dataset (“Exam_data.csv”) for analysis. This dataset will be used throughout the exercise to explore distribution visualization techniques.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\n\nThis section uses the ggridges package to create ridgeline plots, which show the distribution of English scores across different classes.\nRidgeline plots are effective for visualizing distribution in a compact and comparative format.\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nEnhance the ridgeline plot by filling the ridges based on the x-axis values.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe warning message we are seeing is because the stat(x) syntax has been deprecated in ggplot2 version 3.4.0 and above. The recommended alternative is to use after_stat(x).\n\n\nBelow is the revised code:\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = after_stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\nMap the probabilities directly onto the fill colors using ECDF, creating a gradient color effect.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\nAdd quantile lines to the ridgeline plot to visualize quartiles.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis section introduces the Raincloud Plot, a combination of density plot, box plot, and scatter plot (dots).\nWe use stat_halfeye() to create a visually rich representation of distribution.\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\nCombine the half-eye graph with a boxplot to provide a clearer view of score distribution and central tendency.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\nEnhance the visualization by adding dot plots to showcase individual data points.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\nFinalize the raincloud plot by adjusting orientation and applying a clean theme.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\nWarning: The provided binwidth will cause dots to overflow the boundaries of the\ngeometry.\n→ Set `binwidth = NA` to automatically determine a binwidth that ensures dots\n  fit within the bounds,\n→ OR set `overflow = \"compress\"` to automatically reduce the spacing between\n  dots to ensure the dots fit within the bounds,\n→ OR set `overflow = \"keep\"` to allow dots to overflow the bounds of the\n  geometry without producing a warning.\nℹ For more information, see the documentation of the `binwidth` and `overflow`\n  arguments of `?ggdist::geom_dots()` or the section on constraining dot sizes\n  in vignette(\"dotsinterval\") (`vignette(ggdist::dotsinterval)`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe warning we are seeing is because the stat_dots() function in the ggplot2 code is trying to fit dots within a limited space, but the specified binwidth and dotsize cause the dots to overflow the available area.\n\n\nWe try the solution below (set binwidth = NA) to let ggdist automatically calculate the best binwidth.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = NA,   # Automatically adjusts binwidth\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "In this section, we begin by installing and loading the necessary R packages using the pacman package, which simplifies package management by loading multiple packages at once. The key packages include:\n\nggdist: For advanced distribution visualization.\nggridges: For creating ridgeline plots.\nggthemes: For applying thematic styles to plots.\ncolorspace: For color manipulation in plots.\ntidyverse: A collection of R packages designed for data science.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nThis section demonstrates how to load a dataset (“Exam_data.csv”) for analysis. This dataset will be used throughout the exercise to explore distribution visualization techniques.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "This section uses the ggridges package to create ridgeline plots, which show the distribution of English scores across different classes.\nRidgeline plots are effective for visualizing distribution in a compact and comparative format.\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nEnhance the ridgeline plot by filling the ridges based on the x-axis values.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe warning message we are seeing is because the stat(x) syntax has been deprecated in ggplot2 version 3.4.0 and above. The recommended alternative is to use after_stat(x).\n\n\nBelow is the revised code:\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = after_stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\nMap the probabilities directly onto the fill colors using ECDF, creating a gradient color effect.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\nAdd quantile lines to the ridgeline plot to visualize quartiles.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "This section introduces the Raincloud Plot, a combination of density plot, box plot, and scatter plot (dots).\nWe use stat_halfeye() to create a visually rich representation of distribution.\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\nCombine the half-eye graph with a boxplot to provide a clearer view of score distribution and central tendency.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\nEnhance the visualization by adding dot plots to showcase individual data points.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\nFinalize the raincloud plot by adjusting orientation and applying a clean theme.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\nWarning: The provided binwidth will cause dots to overflow the boundaries of the\ngeometry.\n→ Set `binwidth = NA` to automatically determine a binwidth that ensures dots\n  fit within the bounds,\n→ OR set `overflow = \"compress\"` to automatically reduce the spacing between\n  dots to ensure the dots fit within the bounds,\n→ OR set `overflow = \"keep\"` to allow dots to overflow the bounds of the\n  geometry without producing a warning.\nℹ For more information, see the documentation of the `binwidth` and `overflow`\n  arguments of `?ggdist::geom_dots()` or the section on constraining dot sizes\n  in vignette(\"dotsinterval\") (`vignette(ggdist::dotsinterval)`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe warning we are seeing is because the stat_dots() function in the ggplot2 code is trying to fit dots within a limited space, but the specified binwidth and dotsize cause the dots to overflow the available area.\n\n\nWe try the solution below (set binwidth = NA) to let ggdist automatically calculate the best binwidth.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = NA,   # Automatically adjusts binwidth\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "title": "Hands-on Exercise 4",
    "section": "1. Getting Started",
    "text": "1. Getting Started\n\n1.1 Installing and launching R packages\nWe load packages for statistical analysis using ggstatsplot and tidyverse.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n1.2 Importing Data\nWe re-import the exam data for analysis.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4",
    "section": "2 One-sample test: gghistostats() method",
    "text": "2 One-sample test: gghistostats() method\nA one-sample test is used to determine if the average English scores in the dataset are significantly different from a test value of 60.\nWe use the gghistostats function from ggstatsplot, specifying:\n\nData: The exam dataset.\nVariable: ENGLISH scores.\nTest Type: Bayesian (type = “bayes”).\nTest Value: 60, representing the threshold for comparison.\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nAnalysis:\nThe histogram with overlaid Bayesian distribution allows visual assessment of score distribution.\nThe test result indicates whether the mean English score is statistically different from 60."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4",
    "section": "3 Two-sample mean test: ggbetweenstats()",
    "text": "3 Two-sample mean test: ggbetweenstats()\nThis test compares the average Math scores between two groups: Male and Female.\nNon-parametric test (type = “np”) is used due to the nature of the data distribution.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nAnalysis:\nThe boxplot shows the distribution of Math scores between genders.\nSignificance testing directly indicates if the difference between the two groups is statistically meaningful."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4",
    "section": "4 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "4 Oneway ANOVA Test: ggbetweenstats() method\nThis test compares English scores among different racial groups.\nANOVA (Analysis of Variance) is applied, followed by pairwise comparisons between groups.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nAnalysis:\nThe ANOVA test identifies significant differences in English scores among racial groups.\nPairwise comparisons provide insight into which groups differ significantly.\n\n4.1 Significant Test of Correlation: ggscatterstats()\nThis test explores the relationship between Math and English scores using scatter plot visualization.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\nAnalysis:\nA scatter plot with correlation statistics visualizes the relationship between Math and English scores.\n\n\n4.2 Significant Test of Association (Depedence) : ggbarstats() methods\nThis test examines the association between Math score ranges (categorized) and Gender.\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\nAnalysis:\nThe bar chart visualizes the distribution of genders across different Math score categories.\nThe test reveals whether Math performance categories are associated with gender distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-2",
    "title": "Hands-on Exercise 4",
    "section": "1. Getting Started",
    "text": "1. Getting Started\nThis section focuses on visualizing uncertainty in statistical estimates using various methods in R. Understanding and effectively visualizing uncertainty is essential for making informed decisions based on data, as it highlights the range of possible outcomes.\n\n1.1 Installing and loading the packages\nWe use several R packages designed for advanced data visualization:\n\nplotly: For creating interactive plots.\ncrosstalk: Enables shared data between multiple visualizations.\nDT: Creates interactive data tables.\nggdist: A powerful package for visualizing uncertainty, including point and gradient intervals.\nggridges: For creating ridgeline plots.\ncolorspace: For enhanced color management.\ngganimate: For creating animated visualizations.\ntidyverse: A collection of packages for data manipulation and visualization.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n1.2 Data import\nWe load the “Exam_data.csv” dataset, which contains test scores for different races. This dataset will be used to demonstrate various methods of visualizing uncertainty.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4",
    "section": "2. Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "2. Visualizing the uncertainty of point estimates: ggplot2 methods\n\n2.1 Calculating Summary Statistics\nWe first calculate key summary statistics:\n\nn: Number of students in each race group.\nmean: Average math score for each race.\nsd: Standard deviation of math scores for each race.\nse: Standard error of the mean\n\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n2.2 Displaying Summary Statistics\nWe display the calculated statistics in a neat table format for easy understanding.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-uncertainty-with-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-uncertainty-with-error-bars",
    "title": "Hands-on Exercise 4",
    "section": "3. Visualizing Uncertainty with Error Bars",
    "text": "3. Visualizing Uncertainty with Error Bars\n\n3.1 Plotting standard error bars of point estimates\n\nWe use geom_errorbar to visualize standard errors around the mean for each race group.\nRed dots represent the mean values.\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n3.2 Confidence Interval (95%)\nWe modify the error bars to show 95% confidence intervals.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-error-bars-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-error-bars-with-plotly",
    "title": "Hands-on Exercise 4",
    "section": "4. Interactive Error Bars with Plotly",
    "text": "4. Interactive Error Bars with Plotly\n\n4.1 Creating Interactive Error Bars\n\nWe convert the static confidence interval plot into an interactive plot using Plotly.\nHovering over each point displays additional information, such as race, sample size, average score, and confidence interval.\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe warning messages we are seeing can be resolved by making two adjustments to the code:\n\nChange size to linewidth for Lines:\nThe size aesthetic for geom_errorbar is deprecated in ggplot2 3.4.0 and above.\nReplace size with linewidth for the error bars.\nCorrect the text Aesthetic in geom_point:\nThe text aesthetic is not directly recognized by geom_point() in ggplot2.\nInstead, we need to use tooltip inside ggplotly() to display text in tooltips.\n\n\n\nPlease find the update code chunk:\n\nshared_df = SharedData$new(my_sum)\n\nbscols(\n  widths = c(4, 8),\n  ggplotly(\n    ggplot(shared_df) +\n      geom_errorbar(\n        aes(\n          x = reorder(RACE, -mean),\n          ymin = mean - 2.58 * se, \n          ymax = mean + 2.58 * se\n        ), \n        width = 0.2, \n        colour = \"black\", \n        alpha = 0.9, \n        linewidth = 0.5  # Changed from size to linewidth\n      ) +\n      geom_point(\n        aes(\n          x = RACE, \n          y = mean\n        ),\n        color = \"red\", \n        size = 1.5, \n        alpha = 1\n      ) +\n      xlab(\"Race\") + \n      ylab(\"Average Scores\") + \n      theme_minimal() + \n      theme(\n        axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1)\n      ) +\n      ggtitle(\"99% Confidence Interval of Average Maths Scores by Race\"),\n    tooltip = \"text\"\n  ),\n  DT::datatable(\n    shared_df, \n    rownames = FALSE, \n    class = \"compact\", \n    width = \"100%\", \n    options = list(pageLength = 10, scrollX = TRUE), \n    colnames = c(\"No. of pupils\", \"Avg Scores\", \"Std Dev\", \"Std Error\")\n  ) %&gt;%\n    formatRound(columns = c('mean', 'sd', 'se'), digits = 2)\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-uncertainty-with-ggdist",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-uncertainty-with-ggdist",
    "title": "Hands-on Exercise 4",
    "section": "5. Visualizing Uncertainty with ggdist",
    "text": "5. Visualizing Uncertainty with ggdist\n\n5.1 Point Interval Plots\nWe use the ggdist package to create enhanced point interval plots, which display multiple confidence intervals (95% and others) around the mean or median.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n5.2 Gradient Interval Plots\nA gradient interval plot uses color gradients to represent uncertainty visually.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe warning we are seeing is because the parameters .point and .interval are not recognized by stat_pointinterval() in our version of ggplot2 or the ggdist package. These parameters are used in older versions or may require a slightly different syntax.\n\n\nWe use the code chunk below to fix this warning:\n\nInstead of using .point and .interval, we use the point_interval function directly within the stat_pointinterval() to specify the type of interval we want.\nFor a median point with a 95% confidence interval, use point_interval = median_qi directly.\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    point_interval = median_qi,  # Using median_qi for median and 95% CI\n    .width = 0.95\n  ) +\n  labs(\n    title = \"Visualizing Confidence Intervals of Median Math Score\",\n    subtitle = \"Median Point + 95% Interval Plot\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n5.3 Visualizing the uncertainty of point estimates: ggdistmethods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n5.4 Visualizing the uncertainty of point estimates: ggdistmethods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4",
    "section": "6. Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "6. Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\n6.1 Installing ungeviz package\nHypothetical Outcome Plots (HOPs) are a powerful tool for visualizing uncertainty in data. They simulate multiple possible outcomes, providing a visual representation of variability.\nWe use the ungeviz package to create HOPs in this section.\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nUsing github PAT from envvar GITHUB_PAT. Use `gitcreds::gitcreds_set()` and unset GITHUB_PAT in .Renviron (or elsewhere) if you want to use the more secure git credential store instead.\n\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (74e1651b) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\n6.1.1 Launch the application in R\n\nlibrary(ungeviz)\n\n\n\n\n6.2 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nWe use a scatter plot with jitter to display individual data points (Math scores by race).\nThe geom_hpline function adds horizontal lines representing hypothetical outcomes (HOPs) simulated for each group.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-3",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-3",
    "title": "Hands-on Exercise 4",
    "section": "1. Getting Started",
    "text": "1. Getting Started\nThis section introduces the concept of funnel plots, which are a valuable tool for fair comparisons between groups, particularly in healthcare and quality control settings. A funnel plot visually displays variations between groups while accounting for differences in sample sizes, helping to distinguish between normal and abnormal variations."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages-1",
    "title": "Hands-on Exercise 4",
    "section": "1.1 Installing and Launching R Packages",
    "text": "1.1 Installing and Launching R Packages\nThis section introduces FunnelPlotR, a package for creating funnel plots that allow for fair comparisons between groups.\nPackages Used:\n\ntidyverse: A collection of R packages for data manipulation and visualization.\nFunnelPlotR: A package specifically designed to create funnel plots in R.\nplotly: For creating interactive visualizations.\nknitr: For document rendering and reporting.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr,ggrepel)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-data-1",
    "title": "Hands-on Exercise 4",
    "section": "1.2 Importing Data",
    "text": "1.2 Importing Data\n\nWe load the “COVID-19_DKI_Jakarta.csv” dataset, which contains COVID-19 statistics for various sub-districts in Jakarta.\nThe mutate_if function is used to ensure all character columns are converted to factors, which is useful for categorical analysis.\n\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4",
    "section": "2. FunnelPlotR methods: The basic plot",
    "text": "2. FunnelPlotR methods: The basic plot\n\nThe first funnel plot is generated using the funnel_plot function from the FunnelPlotR package.\nThis plot compares the number of positive COVID-19 cases (numerator) to deaths (denominator) across different sub-districts.\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-enhanced-versions",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-enhanced-versions",
    "title": "Hands-on Exercise 4",
    "section": "3. FunnelPlotR methods: Enhanced Versions",
    "text": "3. FunnelPlotR methods: Enhanced Versions\n\n3.1 Makeover 1: Parameter Adjustments\n\nWe switch the numerator and denominator, making it a proportion ratio (PR) funnel plot.\nThe x-axis and y-axis ranges are customized to improve clarity.\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe warning indicates that the arguments xrange and yrange are deprecated in the funnel_plot() function.\nThey have been replaced with:\n• x_range instead of xrange\n• y_range instead of yrange\n\n\nUpdated code chunk:\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     \n  x_range = c(0, 6500),  # Corrected from xrange to x_range\n  y_range = c(0, 0.05)   # Corrected from yrange to y_range\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n3.2 Makeover 2: Further Customization\n\nThe plot title and axis labels are customized to enhance clarity.\nLabels are removed for a cleaner look.\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nSame for the previous section, using the updated code chunk below to resolve the warning:\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = c(0, 6500),   # Corrected from xrange to x_range\n  y_range = c(0, 0.05),   # Corrected from yrange to y_range\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",           \n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4",
    "section": "4. Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "4. Funnel Plot for Fair Visual Comparison: ggplot2 methods\n\n4.1 Data Preparation\n\nWe calculate the fatality rate (deaths per positive case) and the standard error for each sub-district.\nFiltering is applied to exclude sub-districts with zero rates.\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\n\n4.2 Calculating Confidence Intervals\n\nUsing weighted mean to get the average rate for the funnel plot.\nCalculating 95% and 99.9% confidence limits using the standard error.\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#creating-static-funnel-plot-with-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#creating-static-funnel-plot-with-ggplot2",
    "title": "Hands-on Exercise 4",
    "section": "5. Creating Static Funnel Plot with ggplot2",
    "text": "5. Creating Static Funnel Plot with ggplot2\nA static funnel plot is generated using ggplot2, displaying:\n\nData points for each sub-district.\nConfidence intervals (95% and 99.9%) as dashed and solid lines.\nThe overall average rate as a horizontal line.\n\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nUnderstanding the Warnings:\n\nWarning: Unknown Aesthetic label in geom_point()\n• The label aesthetic in geom_point() is not recognized because it is not a valid aesthetic for points.\n• The correct approach is to use geom_text() or geom_text_repel() (from ggrepel package) for text labels.\nWarning: Numeric legend.position is Deprecated\n• Direct numeric coordinates for legend.position are deprecated.\n• We should use the legend.position.inside argument with a list of c(x, y) values.\n\n\n\nUpdated code chunk:\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  # Points without label aesthetic\n  geom_point(alpha = 0.4) +\n  # Adding text labels using geom_text_repel\n  geom_text_repel(aes(label = `Sub-district`), \n                  size = 3, \n                  color = \"grey40\", \n                  max.overlaps = 15) +\n  # Confidence intervals (95% and 99%)\n  geom_line(data = dfCI, aes(x = number.seq, y = number.ll95), \n            size = 0.4, colour = \"grey40\", linetype = \"dashed\") +\n  geom_line(data = dfCI, aes(x = number.seq, y = number.ul95), \n            size = 0.4, colour = \"grey40\", linetype = \"dashed\") +\n  geom_line(data = dfCI, aes(x = number.seq, y = number.ll999), \n            size = 0.4, colour = \"grey40\") +\n  geom_line(data = dfCI, aes(x = number.seq, y = number.ul999), \n            size = 0.4, colour = \"grey40\") +\n  geom_hline(data = dfCI, aes(yintercept = fit.mean), \n             size = 0.4, colour = \"grey40\") +\n  coord_cartesian(ylim = c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = 0.045, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = 0.045, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(\n    plot.title = element_text(size = 12),\n    legend.position = \"right\",  # Adjusted for better control\n    legend.title = element_text(size = 7),\n    legend.text = element_text(size = 7),\n    legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n    legend.key.height = unit(0.3, \"cm\")\n  )\n\np\n\nWarning: ggrepel: 226 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4",
    "section": "6. Interactive Funnel Plot: plotly + ggplot2",
    "text": "6. Interactive Funnel Plot: plotly + ggplot2\n\nWe convert the static ggplot into an interactive plot using Plotly.\nHover tooltips display additional information, making it more user-friendly.\n\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\n\nWarning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomTextRepel() has yet to be implemented in plotly.\n  If you'd like to see this geom implemented,\n  Please open an issue with your example code at\n  https://github.com/ropensci/plotly/issues\n\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "To begin this exercise, load the necessary R packages that support interactive and linked visualisations.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nWe’ll work with a dataset containing students’ exam scores. This data will be used throughout the exercise to create various visualisations.\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\nThis plot introduces basic interactivity where hovering over dots reveals student IDs.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nAdd richer information to tooltips by concatenating ID and class.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\nModify the tooltip appearance using inline CSS.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\nShow aggregate values like mean and SEM with hover feedback.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nReplace the size argument with linewidth ingeom = \"errorbar\"layer to resolve the warning.\nExplanation\n\nsize used to control the thickness of lines in earlier ggplot2 versions.\nSince ggplot2 v3.4.0, size is reserved for point sizes, and linewidth should be used for line thickness to improve clarity and consistency.\n\n\n\n\nHere is the corrected version of the code:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nImplement visual effects such as highlighting and opacity change on hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\nImplement visual effects such as highlighting and opacity change on hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nImplement visual effects such as highlighting and opacity change on hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nClicking a dot opens a URL with more student information.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\nSynchronise hover effects across multiple views using shared IDs.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\n“No trace type specified” mean we didn’t specify what kind of plot we want, but since we gave x and y, it will assume we want a scatter plot. By default, it chooses type = 'scatter'.\n\n“No scatter mode specified: Setting the mode to markers”means a scatter plot can have different “modes”, such as:\n\nmode = ‘markers’ → only dots\nmode = ‘lines’ → connected lines\nmode = ‘lines+markers’ → both dots and lines\nSince we didn’t specify a mode, Plotly chose: mode = 'markers' (i.e. dots only)\n\n\n\n\nIf we want to be more explicit, here is the code:\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH, \n        type = 'scatter', \n        mode = 'markers')\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\nSimilar to the note of previous code chunk, we can specify the trace type and mode to be more explicit:\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE,\n        type = 'scatter', \n        mode = 'markers')\n\n\n\n\n\n\n\n\nConvert existing ggplot2 objects into interactive plots.\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nHighlight observations across multiple charts using highlight_key() and subplot().\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\nRender a searchable, sortable, compact datatable using DT.\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\nLink DT tables and plots interactively using the crosstalk framework.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "To begin this exercise, load the necessary R packages that support interactive and linked visualisations.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "We’ll work with a dataset containing students’ exam scores. This data will be used throughout the exercise to create various visualisations.\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-visualisation-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-visualisation-with-ggiraph",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "This plot introduces basic interactivity where hovering over dots reveals student IDs.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#section",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#section",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Add richer information to tooltips by concatenating ID and class.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\nModify the tooltip appearance using inline CSS.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\nShow aggregate values like mean and SEM with hover feedback.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nReplace the size argument with linewidth ingeom = \"errorbar\"layer to resolve the warning.\nExplanation\n\nsize used to control the thickness of lines in earlier ggplot2 versions.\nSince ggplot2 v3.4.0, size is reserved for point sizes, and linewidth should be used for line thickness to improve clarity and consistency.\n\n\n\n\nHere is the corrected version of the code:\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nImplement visual effects such as highlighting and opacity change on hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\nImplement visual effects such as highlighting and opacity change on hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nImplement visual effects such as highlighting and opacity change on hover.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nClicking a dot opens a URL with more student information.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\nSynchronise hover effects across multiple views using shared IDs.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-visualisation-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-visualisation-with-plotly",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "plot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\n“No trace type specified” mean we didn’t specify what kind of plot we want, but since we gave x and y, it will assume we want a scatter plot. By default, it chooses type = 'scatter'.\n\n“No scatter mode specified: Setting the mode to markers”means a scatter plot can have different “modes”, such as:\n\nmode = ‘markers’ → only dots\nmode = ‘lines’ → connected lines\nmode = ‘lines+markers’ → both dots and lines\nSince we didn’t specify a mode, Plotly chose: mode = 'markers' (i.e. dots only)\n\n\n\n\nIf we want to be more explicit, here is the code:\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH, \n        type = 'scatter', \n        mode = 'markers')\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\nSimilar to the note of previous code chunk, we can specify the trace type and mode to be more explicit:\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE,\n        type = 'scatter', \n        mode = 'markers')\n\n\n\n\n\n\n\n\nConvert existing ggplot2 objects into interactive plots.\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nHighlight observations across multiple charts using highlight_key() and subplot().\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-and-dt",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-and-dt",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Render a searchable, sortable, compact datatable using DT.\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\nLink DT tables and plots interactively using the crosstalk framework.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "title": "Hands-on Exercise 3",
    "section": "2.1 Getting Started",
    "text": "2.1 Getting Started\nLoading the R packages\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "title": "Hands-on Exercise 3",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\nLoad population data from Excel and prepare it for time-series animation.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"Data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(col, as.factor)`.\nCaused by warning:\n! Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(col)\n\n  # Now:\n  data %&gt;% select(all_of(col))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nWe’re getting the above warning because we’re passing an external character vector col directly into across(), which uses tidyselect under the hood — and tidyselect no longer allows that syntax.\nSolution:\n\nUse all_of() inside across()\nConvert “Country” and “Continent” to factor (explicitly and correctly).\nConvert “Year” column to integer.\n\n\n\n\nUpdated code chunk:\n\ncol &lt;- c(\"Country\", \"Continent\")\n\nglobalPop &lt;- read_xls(\"Data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(all_of(col), as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-visualisation-with-gganimate",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-visualisation-with-gganimate",
    "title": "Hands-on Exercise 3",
    "section": "2.3 Animated Visualisation with gganimate",
    "text": "2.3 Animated Visualisation with gganimate\n\n2.3.1 Building a static population bubble plot\nCreate a base plot using geom_point() with aesthetic mappings.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n2.3.2 Animated Plot\nUse transition_time() and ease_aes() to animate transitions over time.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-visualisation-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-visualisation-with-plotly",
    "title": "Hands-on Exercise 3",
    "section": "2.4 Animated Visualisation with plotly",
    "text": "2.4 Animated Visualisation with plotly\n\n2.4.1 Using ggplotly()\nConvert animated ggplot objects to interactive plotly charts.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe first warning we’re getting: Ignoring unknown aesthetics: frame is because frame is not a valid aesthetic in ggplot2::geom_point() — it only works in Plotly when building animations.\nSolution: Use plotly::plot_ly() directly for animations instead of ggplot2::ggplot()\nThe second warning”Warning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to replace is not a multiple of replacement length” happens because ggplotly() tries to generate frames from ggplot object, but it has no built-in animation logic, and frame was misused in the aes() mapping. So plotly’s frame structure is broken or inconsistent.\n\n\n\nWe can use the code chunk below to get an interactive static bubble chart:\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nFor animated version, we can switch to plotly::plot_ly()\n\nplot_ly(globalPop,\n        x = ~Old,\n        y = ~Young,\n        size = ~Population,\n        color = ~Country,\n        frame = ~Year,\n        text = ~paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Pop:\", Population),\n        type = 'scatter',\n        mode = 'markers',\n        sizes = c(10, 80)) %&gt;%\n  layout(xaxis = list(title = \"% Aged\"),\n         yaxis = list(title = \"% Young\"))\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\n2.4.2 Fix Display Issues\nFix layout issues and hide unnecessary legends to clean up the output.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7):\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\n2.4.3 Directly with plot_ly()\nUse plot_ly() directly to generate a bubble chart animated by year.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nWe’re seeing the repeated warning: Warning: line.width does not currently support multiple values.because Plotly is being asked to apply multiple line.width values (likely per-frame or per-point), but that property doesn’t support vectors — it expects a single value.\nWhen using plot_ly() with frame = ~Year (i.e., animation), each frame is a separate trace, and Plotly internally tries to apply styling (like line.width) across frames. If the dataset has more than one entry per frame, and it tries to assign a vector of widths, this warning appears.\nHowever — we’re not explicitly using line.width in the code, so it’s likely being set implicitly, possibly by an old or incompatible version of Plotly R or from system styles.\n\n\n\nWe can explicitly define both marker and symbol in the plot, and remove size = ~Population from the main aesthetic — instead, control it entirely inside marker.\n\nlibrary(plotly)\n\nbp &lt;- plot_ly(globalPop,\n        x = ~Old,\n        y = ~Young,\n        frame = ~Year,\n        text = ~paste(\"Country:\", Country, \"&lt;br&gt;Population:\", Population),\n        hoverinfo = \"text\",\n        type = \"scatter\",\n        mode = \"markers\",\n        color = ~Continent,\n        marker = list(\n          sizemode = \"area\",\n          sizeref = 2 * max(globalPop$Population, na.rm = TRUE) / (100^2),\n          size = ~Population,\n          line = list(width = 1)\n        ),\n        showlegend = FALSE\n) %&gt;%\n  layout(\n    xaxis = list(title = \"% Aged\"),\n    yaxis = list(title = \"% Young\")\n  )\n\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#original-submission",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#original-submission",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "1 Original Submission",
    "text": "1 Original Submission\n\nres_data_grouped &lt;- data %&gt;%\n  mutate(AgeGroup = case_when(\n    Age &gt;= 0 & Age &lt;= 20 ~ \"Under Age\",\n    Age &gt;= 21 & Age &lt;= 60 ~ \"Adult\",\n    Age &gt;= 61 ~ \"Aging\"\n  )) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\")\n\nres_data_grouped_filtered &lt;- res_data_grouped %&gt;%\n  filter(AgeGroup != \"Adult\")\n\nage_summary &lt;- res_data_grouped %&gt;%\n  filter(AgeGroup %in% c(\"Under Age\", \"Aging\")) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\")\n\n\nage_ratio &lt;- age_summary %&gt;%\n  tidyr::pivot_wider(names_from = AgeGroup, values_from = Total) %&gt;%\n  mutate(ratio = Aging / `Under Age`)\n\nggplot(age_ratio, aes(x = ratio, y = reorder(PA, ratio))) +\n  geom_col(fill = \"steelblue\") +\n  labs(\n    title = \"Aging-to-Under-Age Population Ratio by Planning Area\",\n    x = \"Aging / Under Age Ratio\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 5),\n    plot.title = element_text(face = \"bold\")\n  )\n\nWarning: Removed 13 rows containing missing values or values outside the scale range\n(`geom_col()`)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#three-good-design-principles-applied",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#three-good-design-principles-applied",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "2 Three Good Design Principles Applied",
    "text": "2 Three Good Design Principles Applied\n\nClear Title and Labels\n\nThe title clearly describes the data being presented: “Aging-to-Under-Age Population Ratio by Planning Area.”\nAxis labels are descriptive, making the visual easily understandable.\n\nHorizontal Bar Chart for Easy Comparison\n\nThe use of a horizontal bar chart effectively displays the aging-to-under-age ratio by planning area, allowing easy comparison across areas.\n\nSorted Order for Better Analysis\n\nPlanning areas are sorted by the aging-to-under-age ratio, making it easy to identify areas with the highest and lowest ratios."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#three-areas-for-further-improvement",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#three-areas-for-further-improvement",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "3 Three Areas for Further Improvement",
    "text": "3 Three Areas for Further Improvement\n\nEnhanced Visualization\nA gradient color scheme from light blue (low ratio) to dark red (high ratio) enhances visual clarity, showing which areas have a higher aging population.\nOptimized Annotations\n\nA dashed vertical line at ratio = 1 indicates a balanced population between the aging and under-age groups.\nThe highest and lowest ratios are directly annotated, making it easy to identify critical areas.\n\nFilter Areas with No Values\nAreas with zero values (no data) have been removed from the visualization, ensuring only meaningful data is displayed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#makeover-version",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#makeover-version",
    "title": "Take-home Exercise 1 - Understanding Singapore’s Demographic Landscape: Population Age Structure and Spatial Patterns in 2024",
    "section": "4 Makeover Version",
    "text": "4 Makeover Version\n\n# Grouping Data into Age Categories\ndata &lt;- data %&gt;%\n  mutate(AgeGroup = case_when(\n    Age &gt;= 0 & Age &lt;= 20 ~ \"Under Age\",\n    Age &gt;= 21 & Age &lt;= 60 ~ \"Adult\",\n    Age &gt;= 61 ~ \"Aging\"\n  ))\n\n# Calculating Population by Age Group for Each Planning Area\nres_data_grouped &lt;- data %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\")\n\n# Filtering Only \"Under Age\" and \"Aging\"\nres_data_filtered &lt;- res_data_grouped %&gt;%\n  filter(AgeGroup != \"Adult\")\n\n# Pivoting Data to Calculate Aging-to-Under-Age Ratio\nage_summary &lt;- res_data_filtered %&gt;%\n  pivot_wider(names_from = AgeGroup, values_from = Pop, values_fill = 0) %&gt;%\n  mutate(ratio = Aging / `Under Age`) %&gt;%\n  filter(!is.na(ratio))\n\n# Sorting by Ratio for Better Visualization\nage_summary &lt;- age_summary %&gt;% arrange(ratio)\n\n# Calculate Dynamic Plot Height (1.2 times number of planning areas)\nplot_height &lt;- nrow(age_summary) * 0.3\n\n# Create the Enhanced Plot\np &lt;- ggplot(age_summary, aes(x = ratio, y = reorder(PA, ratio), fill = ratio)) +\n  geom_col() +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkred\") +\n  geom_vline(xintercept = 1, color = \"gray\", linetype = \"dashed\") +\n  geom_text(aes(label = ifelse(ratio == max(ratio, na.rm = TRUE), \n                               paste(\"Highest:\", round(ratio, 2)), \n                               ifelse(ratio == min(ratio, na.rm = TRUE) & ratio &gt; 0, \n                                      paste(\"Lowest:\", round(ratio, 2)), \n                                      \"\"))), \n            hjust = -0.1, size = 3.5, color = \"black\") +\n  labs(\n    title = \"Enhanced Aging-to-Under-Age Population Ratio by Planning Area\",\n    x = \"Aging / Under Age Ratio\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    axis.text.y = element_text(size = 10, hjust = 1, margin = margin(r = 8)),\n    axis.text.x = element_text(size = 10),\n    plot.margin = margin(1, 2, 1, 6, \"cm\"),\n    legend.position = \"none\"\n  ) +\n  coord_cartesian(clip = \"off\", ylim = c(1, nrow(age_summary)))\n\n# Display the Plot\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nmutate(ratio = Aging / Under Age): Calculates the ratio of the aging population to the under-age population for each planning area.\nfilter(!is.na(ratio)): Removes any rows where the ratio calculation is not possible (e.g., missing values)."
  }
]